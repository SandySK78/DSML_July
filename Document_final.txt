import pandas as pd

# Sample DataFrame 1 (df1) - Task data
df1 = pd.DataFrame({
    'Task_create_time': pd.to_datetime(['2024-01-05 10:00:00', '2024-01-06 12:00:00', '2024-01-08 09:30:00']),
    'Task_resolved_time': pd.to_datetime(['2024-01-08 15:40:00', '2024-01-09 17:00:00', '2024-01-10 18:20:00']),
    'Location': ['New York', 'Los Angeles', 'New York']
})

# Sample DataFrame 2 (df2) - Holidays based on location
df2 = pd.DataFrame({
    'Location': ['New York', 'New York', 'Los Angeles'],
    'Holiday': pd.to_datetime(['2024-01-08', '2024-02-19', '2024-01-09'])
})

# Function to compute exact working minutes
def compute_working_minutes(row, holiday_dict):
    start, end, location = row['Task_create_time'], row['Task_resolved_time'], row['Location']
    total_minutes = 0

    # Get holidays for the location
    holidays = set(holiday_dict.get(location, []))

    # Generate all valid workdays (excluding weekends and holidays)
    current_time = start
    while current_time < end:
        if current_time.weekday() < 5 and current_time.date() not in holidays:  # Monday-Friday, not a holiday
            # Calculate minutes until end of the day or resolution time
            if current_time.date() == end.date():
                total_minutes += (end - current_time).total_seconds() / 60
                break
            else:
                total_minutes += (1440 - (current_time.hour * 60 + current_time.minute))  # Until midnight

        # Move to next day at 00:00
        current_time = pd.Timestamp(current_time.date() + pd.Timedelta(days=1))

    return int(total_minutes)

# Create a dictionary of holidays per location
holiday_dict = df2.groupby('Location')['Holiday'].apply(set).to_dict()

# Apply function to compute working minutes
df1['Working_minutes'] = df1.apply(compute_working_minutes, axis=1, holiday_dict=holiday_dict)

print(df1[['Task_create_time', 'Task_resolved_time', 'Working_minutes']])
