To achieve this, follow these steps:

1. Convert date columns to datetime format if they aren't already.


2. Filter out weekends (Saturdays and Sundays) from the date range.


3. Exclude holidays based on location by referencing dataframe2.


4. Calculate exact minutes between Task_create_time and Task_resolved_time, considering only valid working days.




---

Python Implementation

import pandas as pd
import numpy as np

# Sample DataFrame 1 (df1)
df1 = pd.DataFrame({
    'Task_create_time': pd.to_datetime(['2024-01-05 10:00:00', '2024-01-06 12:00:00', '2024-01-08 09:30:00']),
    'Task_resolved_time': pd.to_datetime(['2024-01-08 15:45:00', '2024-01-09 17:00:00', '2024-01-10 18:20:00']),
    'Location': ['New York', 'Los Angeles', 'New York']
})

# Sample DataFrame 2 (df2) - Holiday list
df2 = pd.DataFrame({
    'Location': ['New York', 'New York', 'Los Angeles'],
    'Holiday': pd.to_datetime(['2024-01-08', '2024-02-19', '2024-01-09'])
})

# Function to compute working minutes
def compute_working_minutes(row, holiday_dict):
    start, end, location = row['Task_create_time'], row['Task_resolved_time'], row['Location']
    total_minutes = 0

    # Generate all dates between start and end
    all_days = pd.date_range(start.date(), end.date(), freq='D')
    
    # Filter weekends
    weekdays = [d for d in all_days if d.weekday() < 5]  

    # Filter holidays for the specific location
    holidays = set(holiday_dict.get(location, []))
    valid_days = [d for d in weekdays if d not in holidays]

    for day in valid_days:
        if day == start.date():
            # First day: From task creation time to end of the day (23:59)
            total_minutes += (1440 - start.hour * 60 - start.minute)
        elif day == end.date():
            # Last day: From start of the day (00:00) to task resolution time
            total_minutes += (end.hour * 60 + end.minute)
        else:
            # Full working day (24 hours)
            total_minutes += 1440  

    return total_minutes

# Create a dictionary of holidays per location
holiday_dict = df2.groupby('Location')['Holiday'].apply(list).to_dict()

# Apply function to compute exact working minutes
df1['Working_minutes'] = df1.apply(compute_working_minutes, axis=1, holiday_dict=holiday_dict)

print(df1)


---

Explan
