# Creating a Web App to Manage Multiple Python Scripts

To create a web application that manages multiple Python scripts (each with their own dataframe analysis and email functionality), I'll outline a solution using Flask (a lightweight Python web framework) and a simple dashboard interface.

## Solution Architecture

1. **Flask Web Application**: Main controller that handles UI and script execution
2. **Script Registry**: Centralized tracking of all your analysis scripts
3. **Execution Management**: Run scripts and track their status
4. **Results Dashboard**: Display execution history and outputs

## Implementation Steps

### 1. Setup Project Structure

```
/analytics_dashboard
    /scripts/               # Your existing analysis scripts go here
        analysis1.py
        analysis2.py
        ...
    /templates/
        index.html         # Main dashboard page
    app.py                 # Flask application
    script_manager.py      # Script execution manager
    config.py              # Configuration
```

### 2. Create the Flask Application (app.py)

```python
from flask import Flask, render_template, jsonify, request
from script_manager import ScriptManager
import os

app = Flask(__name__)
script_manager = ScriptManager()

@app.route('/')
def index():
    scripts = script_manager.get_scripts()
    execution_history = script_manager.get_execution_history()
    return render_template('index.html', 
                         scripts=scripts,
                         history=execution_history)

@app.route('/run_script', methods=['POST'])
def run_script():
    script_name = request.form['script_name']
    result = script_manager.execute_script(script_name)
    return jsonify(result)

@app.route('/get_status')
def get_status():
    return jsonify(script_manager.get_execution_status())

if __name__ == '__main__':
    app.run(debug=True)
```

### 3. Create Script Manager (script_manager.py)

```python
import importlib
import subprocess
from datetime import datetime
import threading
import os
from config import SCRIPTS_DIR

class ScriptManager:
    def __init__(self):
        self.execution_history = []
        self.active_processes = {}
        
    def get_scripts(self):
        """Discover all available scripts in the scripts directory"""
        scripts = []
        for file in os.listdir(SCRIPTS_DIR):
            if file.endswith('.py') and file != '__init__.py':
                scripts.append({
                    'name': file[:-3],  # Remove .py extension
                    'filename': file
                })
        return scripts
    
    def execute_script(self, script_name):
        """Execute a script in a separate thread"""
        if script_name in self.active_processes:
            return {'status': 'error', 'message': 'Script already running'}
            
        thread = threading.Thread(
            target=self._run_script_thread,
            args=(script_name,)
        )
        thread.start()
        
        return {'status': 'started', 'script': script_name}
    
    def _run_script_thread(self, script_name):
        """Thread function to run the script"""
        start_time = datetime.now()
        self.active_processes[script_name] = {
            'start_time': start_time,
            'status': 'running'
        }
        
        try:
            # Two approaches - choose one:
            
            # 1. Import and run as module (better for structured scripts)
            module = importlib.import_module(f'scripts.{script_name}')
            if hasattr(module, 'main'):
                output = module.main()
            else:
                output = "Script executed (no main function)"
                
            # OR 2. Run as subprocess (better for standalone scripts)
            # result = subprocess.run(
            #     ['python', f'{SCRIPTS_DIR}/{script_name}.py'],
            #     capture_output=True,
            #     text=True
            # )
            # output = result.stdout
            
            status = 'completed'
            message = output
            
        except Exception as e:
            status = 'failed'
            message = str(e)
            
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        self.execution_history.append({
            'script': script_name,
            'start_time': start_time,
            'end_time': end_time,
            'duration': duration,
            'status': status,
            'output': message
        })
        
        del self.active_processes[script_name]
    
    def get_execution_status(self):
        """Get current execution status of all scripts"""
        return {
            'active': self.active_processes,
            'history': self.execution_history[-10:]  # Last 10 executions
        }
    
    def get_execution_history(self):
        """Get complete execution history"""
        return sorted(
            self.execution_history,
            key=lambda x: x['start_time'],
            reverse=True
        )[:50]  # Last 50 executions
```

### 4. Create HTML Template (templates/index.html)

```html
<!DOCTYPE html>
<html>
<head>
    <title>Analytics Scripts Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container mt-4">
        <h1>Analytics Scripts Dashboard</h1>
        
        <div class="row mt-4">
            <div class="col-md-8">
                <h3>Available Scripts</h3>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Script Name</th>
                            <th>Actions</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for script in scripts %}
                        <tr>
                            <td>{{ script.name }}</td>
                            <td>
                                <button class="btn btn-primary run-script" 
                                        data-script="{{ script.name }}">
                                    Run
                                </button>
                            </td>
                            <td id="status-{{ script.name }}">Ready</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            
            <div class="col-md-4">
                <h3>Recent Executions</h3>
                <div class="list-group">
                    {% for exec in history %}
                    <div class="list-group-item 
                              {% if exec.status == 'completed' %}list-group-item-success
                              {% elif exec.status == 'failed' %}list-group-item-danger
                              {% else %}list-group-item-warning{% endif %}">
                        <h6>{{ exec.script }}</h6>
                        <small>
                            {{ exec.start_time.strftime('%Y-%m-%d %H:%M') }} | 
                            {{ "%.2f"|format(exec.duration) }}s
                        </small>
                        {% if exec.output %}
                        <div class="mt-2 output-truncate" title="{{ exec.output }}">
                            {{ exec.output|truncate(50) }}
                        </div>
                        {% endif %}
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>

    <script>
        // Handle script execution
        document.querySelectorAll('.run-script').forEach(button => {
            button.addEventListener('click', function() {
                const scriptName = this.dataset.script;
                const statusCell = document.getElementById(`status-${scriptName}`);
                
                statusCell.textContent = 'Running...';
                this.disabled = true;
                
                fetch('/run_script', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `script_name=${encodeURIComponent(scriptName)}`
                })
                .then(response => response.json())
                .then(data => {
                    if(data.status === 'started') {
                        // Poll for status updates
                        const pollInterval = setInterval(() => {
                            fetch('/get_status')
                                .then(res => res.json())
                                .then(statusData => {
                                    const scriptStatus = statusData.history.find(
                                        item => item.script === scriptName && 
                                        item.status !== 'running'
                                    );
                                    
                                    if(scriptStatus) {
                                        clearInterval(pollInterval);
                                        statusCell.textContent = scriptStatus.status;
                                        button.disabled = false;
                                        // Refresh the page to update history
                                        window.location.reload();
                                    }
                                });
                        }, 1000);
                    }
                });
            });
        });
    </script>
</body>
</html>
```

### 5. Configuration (config.py)

```python
import os

# Directory where your analysis scripts are stored
SCRIPTS_DIR = os.path.join(os.path.dirname(__file__), 'scripts')

# Email configuration (if scripts need to share settings)
EMAIL_CONFIG = {
    'SMTP_SERVER': 'your.smtp.server',
    'SMTP_PORT': 587,
    'EMAIL_USER': 'your@email.com',
    'EMAIL_PASSWORD': 'yourpassword',
    'DEFAULT_RECIPIENTS': ['recipient1@example.com', 'recipient2@example.com']
}
```

## Adapting Your Existing Scripts

For your existing scripts to work well with this system, consider these modifications:

1. **Standardize Script Structure**:
```python
# scripts/analysis1.py
import pandas as pd
from config import EMAIL_CONFIG

def main():
    # Your existing dataframe analysis
    df = pd.read_csv('data.csv')
    results = df.describe()
    
    # Your email sending logic
    send_email(results)
    
    return "Analysis completed and email sent"

def send_email(content):
    # Your email implementation using EMAIL_CONFIG
    pass

if __name__ == '__main__':
    # Allow script to still run standalone
    main()
```

2. **Error Handling**: Ensure your scripts handle errors gracefully and return meaningful status messages.

## Deployment Options

1. **Local Development**:
   - Just run `python app.py` and visit `http://localhost:5000`

2. **Production Deployment**:
   - Use Waitress or Gunicorn as a production server
   - Consider adding authentication (Flask-Login)
   - Set up proper logging

## Enhancements

1. **Add Scheduling**: Integrate APScheduler to run scripts at specific times
2. **Detailed Reporting**: Create more comprehensive execution reports
3. **Notification System**: Add alerts for failed executions
4. **Parameter Passing**: Allow passing parameters to scripts through the UI

This solution gives you a centralized web interface to manage all your analysis scripts, track their execution, and view historical results - all while maintaining the ability to run them individually if needed.