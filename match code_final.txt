import pandas as pd
import numpy as np

def clean_value(val):
    # Strip spaces and preserve NaN
    if pd.isna(val):
        return np.nan
    elif isinstance(val, str):
        return val.strip()
    else:
        return val

def values_equal(v1, v2):
    # Compare cleaned values
    if pd.isna(v1) and pd.isna(v2):
        return True
    return v1 == v2

def compare_rows_cleaned(dump_df, ref_df, compare_columns):
    dump_df = dump_df.copy()
    results = []

    # Preprocess both DataFrames: strip spaces, keep NaN
    dump_sub = dump_df[compare_columns].applymap(clean_value)
    ref_sub = ref_df[compare_columns].applymap(clean_value)

    for i, dump_row in dump_sub.iterrows():
        full_match_found = False
        best_match_count = -1
        best_mismatched_cols = []

        for j, ref_row in ref_sub.iterrows():
            matches = [values_equal(dump_row[col], ref_row[col]) for col in compare_columns]
            match_count = sum(matches)

            if match_count == len(compare_columns):
                full_match_found = True
                break
            elif match_count > best_match_count:
                best_match_count = match_count
                best_mismatched_cols = [col for col, matched in zip(compare_columns, matches) if not matched]

        if full_match_found:
            results.append((True, []))
        else:
            results.append((False, best_mismatched_cols))

    # Assign results
    dump_df['is_match'] = [r[0] for r in results]
    dump_df['mismatched_columns'] = [r[1] for r in results]

    return dump_df
